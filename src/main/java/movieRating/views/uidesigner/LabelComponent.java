package main.java.movieRating.views.uidesigner;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class LabelComponent {
    private JPanel jpLabel;
    private JLabel lblTag;
    private JLabel lblCant;
    private String tagText;
    private String cantText;

    public LabelComponent(String tagText, String cantText) {
        this.tagText = tagText;
        this.cantText = cantText;
        $$$setupUI$$$();
        setUIComponents();
    }

    public LabelComponent(String tagText) {
        this(tagText, "???");
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("LabelComponent");
        LabelComponent lblComponent = new LabelComponent("Prueba");
        frame.setContentPane(lblComponent.jpLabel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        lblComponent.setCantText("10000");
    }

    public String getTagText() {
        return tagText;
    }

    public void setTagText(String tagText) {
        this.tagText = tagText;
        lblTag.setText(tagText);
    }

    public String getCantText() {
        return cantText;
    }

    public void setCantText(String cantText) {
        this.cantText = cantText;
        lblCant.setText(cantText);
    }

    private void setUIComponents() {
        lblCant.setText(cantText);
        lblTag.setText(tagText);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jpLabel = new JPanel();
        jpLabel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        jpLabel.setBackground(new Color(-3153165));
        lblCant = new JLabel();
        Font lblCantFont = this.$$$getFont$$$(null, Font.BOLD, 20, lblCant.getFont());
        if (lblCantFont != null) lblCant.setFont(lblCantFont);
        lblCant.setForeground(new Color(-16777216));
        lblCant.setText("CantText");
        jpLabel.add(lblCant, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblTag = new JLabel();
        Font lblTagFont = this.$$$getFont$$$(null, Font.BOLD, 16, lblTag.getFont());
        if (lblTagFont != null) lblTag.setFont(lblTagFont);
        lblTag.setForeground(new Color(-16777216));
        lblTag.setText("TagText");
        jpLabel.add(lblTag, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jpLabel;
    }

}
